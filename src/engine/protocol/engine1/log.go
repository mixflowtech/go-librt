// Auto-generated by avdl-compiler v1.3.28 (https://github.com/keybase/node-avdl-compiler)
//   Input file: engine1-avdl/log.avdl

package mixflowengine1

import (
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
	context "golang.org/x/net/context"
)

type LogLevel int

const (
	LogLevel_NONE     LogLevel = 0
	LogLevel_DEBUG    LogLevel = 1
	LogLevel_INFO     LogLevel = 2
	LogLevel_NOTICE   LogLevel = 3
	LogLevel_WARN     LogLevel = 4
	LogLevel_ERROR    LogLevel = 5
	LogLevel_CRITICAL LogLevel = 6
	LogLevel_FATAL    LogLevel = 7
)

func (o LogLevel) DeepCopy() LogLevel { return o }

var LogLevelMap = map[string]LogLevel{
	"NONE":     0,
	"DEBUG":    1,
	"INFO":     2,
	"NOTICE":   3,
	"WARN":     4,
	"ERROR":    5,
	"CRITICAL": 6,
	"FATAL":    7,
}

var LogLevelRevMap = map[LogLevel]string{
	0: "NONE",
	1: "DEBUG",
	2: "INFO",
	3: "NOTICE",
	4: "WARN",
	5: "ERROR",
	6: "CRITICAL",
	7: "FATAL",
}

type DoLogArg struct {
	SessionID int      `codec:"sessionID" json:"sessionID"`
	Level     LogLevel `codec:"level" json:"level"`
	Message   string   `codec:"message" json:"message"`
}

type LogInterface interface {
	DoLog(context.Context, DoLogArg) error
}

func LogProtocol(i LogInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "mixflow.engine.1.log",
		Methods: map[string]rpc.ServeHandlerDescription{
			"doLog": {
				MakeArg: func() interface{} {
					var ret [1]DoLogArg
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[1]DoLogArg)
					if !ok {
						err = rpc.NewTypeError((*[1]DoLogArg)(nil), args)
						return
					}
					err = i.DoLog(ctx, typedArgs[0])
					return
				},
			},
		},
	}
}

type LogClient struct {
	Cli rpc.GenericClient
}

func (c LogClient) DoLog(ctx context.Context, __arg DoLogArg) (err error) {
	err = c.Cli.Call(ctx, "mixflow.engine.1.log.doLog", []interface{}{__arg}, nil)
	return
}
